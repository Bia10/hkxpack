Reading data3 :
All binary is from data3 except stated otherwise.

00 00 00 00 @0+1B0 Beginning of hkRootLevelContainer ?
00 00 00 00 >>> Ignored ? Always 00
4B 00 00 00 @4B+D0 => @11B
=> hkRootLevelContainer [@1B0]

A0 00 00 00 @A0+1B0 => @250
00 00 00 00
65 00 00 00 @65+D0 => @135
=> hkaAnimationContainer [@250]

10 01 00 00 @110+1B0 => @2C0
00 00 00 00
80 00 00 00 @80+D0 => @150
=> hkaSplineCompressedAnimation [@2C0]

B0 13 00 00 @13B0+1B0 => @1560
00 00 00 00
A2 00 00 00 @A2+D0 => @172
=> hkaAnimationBinding [@1560]

F0 13 00 00 @13F0+1B0 => @15A0
00 00 00 00
BB 00 00 00 @BB+D0 => @18B
=> hkMemoryResourceContainer [@15A0]


==========================================
Reading data1
All binary is from data1 except stated otherwise.

Now reading : Root (hkRootLevelContainer) [@1D0]
	Reading member : namedVariants (array of structs : hkRootLevelContainerNamedVariant)

		00 00 00 00 > @0+1B0 => @1B0 => Array : (2)
		10 00 00 00 > @10+1B0 => @1C0 => @Root.NamedVariants
		=> Note about array : The data on the "to" part is always (4-byte)*arrsize long
		=> each byte in the array has the address of the origin of one of the array members. 

		Reading struct : hkRootLevelContainerNamedVariant
			=> Reading member : name (stringptr)

				10 00 00 00 > @Root.NamedVariants[0]
				28 00 00 00 > Merged Animation Container

			=> Reading member : classname (stringptr)

				14 00 00 00 > @Root.NamedVariants[1]
				50 00 00 00 > hkaAnimationContainer

			=> Reading member : variant (ptr on hkReferencedObject)

				> Next data in data2 (because ptr)
					18 00 00 00 > @18+1B0 => @1C8 => @Root.NamedVariants[2]
					02 00 00 00 >>> Ignored ? Always 02
					A0 00 00 00 > @A0+1B0 => @250
				=> @250 is known as an hkaAnimationContainer

		Reading struct : hkRootLevelContainerNamedVariant
			=> Reading member : name (stringptr)

				1C 00 00 00 > @Root.NamedVariants[3]
				70 00 00 00 > Resource Data

			=> Reading member : classname (stringptr)

				20 00 00 00 > @Root.NamedVariants[4]
				80 00 00 00 > hkMemoryResourceContainer

			=> Reading member : variant (ptr on hkReferencedObject)

				> Next data in data2
					24 00 00 00 > @24+1B0 => @Root.NamedVariants[5]
					02 00 00 00
					F0 13 00 00 > @13F0+1B0 => @15A0
				=> 15A0 is known as a hkMemoryResourceContainer

	Conclusion :
	'hkRootLevelContainer': {
			'namedVariants' : [
				{
					'name': "Merged Animation Container",
					'classname': "hkaAnimationContainer",
					'variant': (ResolveToName : @250)
				},
				{
					'name': "Resource Data",
					'classname': "hkMemoryResourceContainer",
					'variant': (ResolveToName : @15A0)
				},
			]
		}

Now reading : AnimCont (hkaAnimationContainer) [@250]
	=> AnimCont extends hkReferencedObject, which has one member
	=> hkReferencedObject extends hkBaseObject, which has no members
	Reading member : memSizeAndRefCount [SERIALIZE_IGNORED]
		=> No reading needed ?
	Reading member : skeletons (array of pointers over hkaSkeleton)
		B4 00 00 00 @B4+1B0 => @264 => Array : (1)
		F0 00 00 00 @F0+1B0 => @2A0 

OK, discovery : 

The actual structs are written in the file, and their addresses are defined in data3.

When a direct ref is needed, the ref is in data1 (members, [complex] array elements, etc..)
When an indirect ref is needed, it is in data2 (mostly pointers)
And sometimes (e.g. the 'data' member of hkaSplineCompressedAnimation), no ref is given at all. The data just sits there, and is waiting to be read.
=> Note about 'data' from hkaSplineCompressedAnimation : it is supposedly an array of UInt8, a primitive type, so it may be why